//Time Complexity of merge sort is O(n log n)
#include<stdio.h>
void Merge(int A[],int low,int mid,int right,int n){
	int i=low;//starting index of 1st array
	int j=mid+1;//starting idx of 2nd array
	int k=0;
	int B[n+1];
	while(i<=mid && j<=right){
		if(A[i]<A[j]){
			B[k++]=A[i++];
		}
		else{
			B[k++]=A[j++];
		}
	}
	while(i<=mid) B[k++]=A[i++];
	while(j<=right) B[k++]=A[j++];
	k=0;
	for(i=low;i<=right;i++){
		A[i]=B[k++];
	}
}
void MergeSort(int A[],int n,int low,int right){
	if(low>=right) return ;
	int mid = (low+right)/2;
	MergeSort(A,n,low,mid);
	MergeSort(A,n,mid+1,right);
	Merge(A,low,mid,right,n);
}
int main(){
	int n;
	scanf("%d",&n);
	int arr[n];
	int i;
	for(i=0;i<n;i++){
		scanf("%d",&arr[i]);
	}
	MergeSort(arr,n,0,n-1);
	for(i=0;i<n;i++){
		printf("%d ",arr[i]);
	}
}
